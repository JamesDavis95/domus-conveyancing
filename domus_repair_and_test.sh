#!/usr/bin/env bash
set -euo pipefail

say(){ printf "\n\033[1;36m▶ %s\033[0m\n" "$*"; }

say "1) Locate the router that defines /api/process…"
cand=""
# Prefer a file that both defines an APIRouter 'router' and mentions '/api/process'
while IFS= read -r f; do
  if grep -qE 'router[[:space:]]*=[[:space:]]*APIRouter' "$f" && grep -q '/api/process' "$f"; then
    cand="$f"; break
  fi
done < <(grep -R --include="*.py" -l 'APIRouter' . | sort)

# Fallback: any router that mounts '/api/' paths
if [[ -z "$cand" ]]; then
  while IFS= read -r f; do
    if grep -qE 'router[[:space:]]*=[[:space:]]*APIRouter' "$f" && grep -q '/api/' "$f"; then
      cand="$f"; break
    fi
  done < <(grep -R --include="*.py" -l 'APIRouter' . | sort)
fi

if [[ -z "$cand" ]]; then
  echo "!! Could not find an APIRouter with /api paths."
  echo "   Try: grep -R --include='*.py' -n '/api/process' ."
  exit 1
fi

mod="${cand#./}"; mod="${mod%.py}"; mod="${mod//\//.}"
say "Using router module: ${mod}  (from ${cand})"

say "2) Write api.py shim to re-export that router…"
cat > api.py <<PY
# Auto-generated by domus_repair_and_test.sh
from ${mod} import router  # re-export the API router (must define /api/process)
PY
sed -n '1,80p' api.py

say "3) Ensure app_secured includes compat + approvals (safe if already) …"
python3 - <<'PY'
from pathlib import Path
p = Path("app_secured.py")
s = p.read_text(encoding="utf-8")
hook = "from main import app as base_app"
bits = []
if "compat_router" not in s:
    bits.append("\nfrom api_compat import router as compat_router\nbase_app.include_router(compat_router)\n")
if "approvals_router" not in s:
    bits.append("\nfrom approvals import router as approvals_router\nbase_app.include_router(approvals_router)\n")
if bits and hook in s:
    s = s.replace(hook, hook + "".join(bits))
    p.write_text(s, encoding="utf-8")
    print("app_secured.py updated.")
else:
    print("app_secured.py OK.")
PY

say "4) Rebuild API image and start…"
docker-compose up -d --build api

say "5) Wait for /health on :8000 …"
for i in {1..60}; do
  code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
  [[ "$code" == "200" ]] && { echo "OK"; break; }
  sleep 1
done
[[ "$code" == "200" ]] || { echo "!! API not healthy"; docker-compose logs --tail=200 api; exit 1; }

say "6) Verify /api/process is in openapi…"
if ! curl -s http://localhost:8000/openapi.json | jq -e '.paths["/api/process"]' >/dev/null; then
  echo "!! /api/process missing in OpenAPI. api.py may still point wrong."
  exit 1
fi
echo "Found /api/process."

say "7) Create matter via compat API…"
MID=$(curl -s -H 'X-Api-Key: demo-key' -X POST http://localhost/api/matters | jq -r '.matter.id')
echo "MID=${MID}"
[[ -n "${MID}" && "${MID}" != "null" ]] || { echo "!! Failed to create matter"; curl -sS -D - -H 'X-Api-Key: demo-key' -X POST http://localhost/api/matters -o -; exit 1; }

say "8) Get ref…"
REF=$(curl -s -H 'X-Api-Key: demo-key' http://localhost/api/matters/$MID | jq -r '.matter.ref')
echo "REF=${REF}"
[[ -n "${REF}" && "${REF}" != "null" ]] || { echo "!! Failed to get ref"; curl -sS -D - -H 'X-Api-Key: demo-key' http://localhost/api/matters/$MID -o -; exit 1; }

say "9) Process sample LLC1/CON29 text…"
OUT=$(curl -s -H 'X-Api-Key: demo-key' -X POST http://localhost/api/process \
  -F "ref=$REF" \
  -F 'llc1_text=Conservation Area. Listed Building. S106 applies.' \
  -F 'con29_text=Enforcement notice: yes. Abutting highway adopted: no. Flood Zone 3. CIL outstanding. Radon affected. Building Regs completion: missing.')
echo "$OUT"
JID=$(echo "$OUT" | jq -r .job_id)
echo "JID=${JID}"
[[ -n "${JID}" && "${JID}" != "null" ]] || { echo "!! No job_id returned"; exit 1; }

say "10) Wait for job to finish…"
for i in {1..60}; do
  st=$(curl -s -H 'X-Api-Key: demo-key' http://localhost/jobs/$JID/status | jq -r .status)
  [[ "$st" == "finished" ]] && { echo "finished"; break; }
  sleep 1
done

say "11) Fetch matter detail…"
curl -s -H 'X-Api-Key: demo-key' http://localhost/api/matters/$MID | jq

say "12) Download outputs…"
curl -s -H 'X-Api-Key: demo-key' -o report.docx http://localhost/la/matters/$MID/report.docx
curl -s -H 'X-Api-Key: demo-key' -o export.json http://localhost/la/matters/$MID/export.json
ls -lh report.docx export.json || true

say "All done."
