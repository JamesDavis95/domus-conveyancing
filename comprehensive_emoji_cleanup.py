#!/usr/bin/env python3 """ Comprehensive Emoji Cleanup - Remove all emojis while preserving design and functionality """ import os import re import glob def remove_emojis_from_text(text): """Remove emojis from text while preserving all other content""" # Define emoji patterns to remove emoji_patterns = [ r'||||||||||||||||||||||||||||||||', r'[\U0001F600-\U0001F64F]', # emoticons r'[\U0001F300-\U0001F5FF]', # symbols & pictographs r'[\U0001F680-\U0001F6FF]', # transport & map symbols r'[\U0001F1E0-\U0001F1FF]', # flags (iOS) r'[\U00002702-\U000027B0]', # Dingbats r'[\U000024C2-\U0001F251]' # Enclosed characters ] for pattern in emoji_patterns: text = re.sub(pattern, '', text) # Clean up any double spaces left by emoji removal text = re.sub(r'\s+', ' ', text) text = re.sub(r'^\s+|\s+$', '', text, flags=re.MULTILINE) return text def clean_file(file_path): """Clean emojis from a single file""" try: with open(file_path, 'r', encoding='utf-8', errors='ignore') as f: original_content = f.read() cleaned_content = remove_emojis_from_text(original_content) # Only write if there were changes if cleaned_content != original_content: with open(file_path, 'w', encoding='utf-8') as f: f.write(cleaned_content) return True except Exception as e: print(f"Error processing {file_path}: {e}") return False def main(): """Main cleanup process""" print("Starting comprehensive emoji cleanup...") # File patterns to clean patterns_to_clean = [ '*.py', '*.html', '*.js', '*.css', '*.sh', '*.md', 'frontend/*.html', 'frontend/*.js', 'frontend/*.css', 'static/*.js', 'static/*.css', 'templates/*.html', 'scripts/*.py', 'integrations/*.py', 'api/*.py', 'lib/**/*.py', 'models/*.py' ] files_cleaned = 0 total_files = 0 for pattern in patterns_to_clean: for file_path in glob.glob(pattern, recursive=True): if os.path.isfile(file_path): total_files += 1 if clean_file(file_path): files_cleaned += 1 print(f"Cleaned: {file_path}") print(f"\nEmoji cleanup complete!") print(f"Files processed: {total_files}") print(f"Files cleaned: {files_cleaned}") print("All functionality and design preserved") if __name__ == "__main__": main()