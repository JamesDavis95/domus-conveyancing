from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text, Boolean, func, Float
from sqlalchemy.orm import relationship
from db import Base


class File(Base):
 __tablename__ = "files"
 id = Column(Integer, primary_key=True)
 matter_id = Column(Integer, ForeignKey("matters.id", ondelete="CASCADE"), index=True, nullable=False)
 kind = Column(String(32), default="search", nullable=False)
 filename = Column(String(512), nullable=False)
 path = Column(Text, nullable=True) # S3 key or local tmp path
 mime = Column(String(128), nullable=True)
 size = Column(Integer, nullable=True)
 created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)

 # New: whether OCR was applied
 ocr_applied = Column(Boolean, default=False, nullable=False)

 matter = relationship("Matter", back_populates="files")

class Enquiry(Base):
 __tablename__ = "enquiries"
 id = Column(Integer, primary_key=True)
 matter_id = Column(Integer, ForeignKey("matters.id", ondelete="CASCADE"), index=True, nullable=False)
 risk_id = Column(String(128), nullable=True)
 status = Column(String(32), default="draft", nullable=False)
 draft_text = Column(Text, nullable=True)
 doc_id = Column(Integer, nullable=True)
 created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)

 matter = relationship("Matter", back_populates="enquiries")

class Audit(Base):
 __tablename__ = "audit"
 id = Column(Integer, primary_key=True)
 matter_id = Column(Integer, ForeignKey("matters.id", ondelete="CASCADE"), index=True, nullable=True)
 action = Column(String(64), nullable=False) # INGEST/UPLOAD/SCAN/EXPORT/APPROVE/PUBLISH
 detail = Column(Text, nullable=True)
 created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)

class Finding(Base):
 __tablename__ = "findings"
 id = Column(Integer, primary_key=True)
 matter_id = Column(Integer, ForeignKey("matters.id", ondelete="CASCADE"), index=True, nullable=False)
 type = Column(String(64), nullable=False) # e.g. "LLC1_CONSERVATION"
 value = Column(Text, nullable=True) # extracted value / note
 source_ref = Column(String(128), nullable=True) # doc/page/line
 created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)

class Risk(Base):
 __tablename__ = "risks"
 id = Column(Integer, primary_key=True)
 matter_id = Column(Integer, ForeignKey("matters.id", ondelete="CASCADE"), index=True, nullable=False)
 code = Column(String(64), nullable=False) # e.g. "FLOOD_ZONE_2"
 severity = Column(String(16), default="medium", nullable=False)
 explanation = Column(Text, nullable=True)
 evidence_ref = Column(String(128), nullable=True) # doc/page/line or doc id
 created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)


from sqlalchemy import event

@event.listens_for(Matter, "after_insert")
def _set_ref_after_insert(mapper, connection, target):
    # Upgrade TEMP- refs to MAT-000001 (id-based) immediately after insert
    ref = getattr(target, "ref", None)
    if not ref or str(ref).startswith("TEMP-"):
        final = f"MAT-{target.id:06d}"
        connection.execute(
            Matter.__table__.update()
            .where(Matter.id == target.id)
            .values(ref=final)
        )

class Property(Base):
    __tablename__ = "properties"

    id = Column(Integer, primary_key=True)
    address_text = Column(String(300), nullable=True)
    uprn = Column(String(16), nullable=True, index=True)
    title_no = Column(String(32), nullable=True, index=True)
    postcode = Column(String(12), nullable=True, index=True)
    lat = Column(Float, nullable=True)
    lon = Column(Float, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)

    matters = relationship("Matter", back_populates="property")


class Matter(Base):
    __tablename__ = "matters"

    id = Column(Integer, primary_key=True)
    # SAFE: default lives on Column, not inside String()
    ref = Column(String(32), unique=True, nullable=False, index=True,
                 default=lambda: f"TEMP-{uuid4().hex[:8]}")
    council = Column(String(100), nullable=True, index=True)

    property_id = Column(Integer, ForeignKey("properties.id", ondelete="SET NULL"), nullable=True, index=True)
    property = relationship("Property", back_populates="matters")

    status = Column(String(32), default="draft", nullable=False)
    received_at = Column(DateTime, nullable=True)
    first_scan_at = Column(DateTime, nullable=True)
    approved_at = Column(DateTime, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)


@event.listens_for(Matter, "after_insert")
def _set_ref_after_insert(mapper, connection, target):
    # Upgrade TEMP- refs to MAT-000001 (id-based) immediately after insert
    ref = getattr(target, "ref", None)
    if not ref or str(ref).startswith("TEMP-"):
        final = f"MAT-{target.id:06d}"
        connection.execute(
            Matter.__table__.update()
            .where(Matter.id == target.id)
            .values(ref=final)
        )
